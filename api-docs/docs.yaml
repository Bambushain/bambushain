openapi: 3.0.3
info:
  title: Sheef Planing
  version: 3.0.0
  description: Sheef Planing
  contact:
    name: Imanuel Ulbricht
    url: 'https://sheef.creastina.art'
    email: kirk@creastina.art
servers:
  - url: 'https://sheef.creastina.art'
    description: Official Sheef server
  - url: 'https://hjw.imanuel.dev'
    description: JÃ¼rgen Testserver
paths:
  /api/login:
    summary: Path for login related actions
    description: >-
      Perform a POST request to login, a DELETE request to logout and a HEAD request to validate the API
      key
    post:
      requestBody:
        description: A new `Login` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      tags:
        - Authentication
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The username or password are invalid
      operationId: login
      summary: Performs a login
      description: Performs the login
    delete:
      tags:
        - Authentication
      responses:
        '204':
          description: The logout was successful
        '401':
          description: The api token is invalid
      security:
        - Sheef: [ ]
      operationId: logout
      summary: Performs a logout
      description: Performs a logout and deletes the api token from the server
    head:
      tags:
        - Authentication
      responses:
        '204':
          description: The api token is valid
        '401':
          description: The api token is invalid
      security:
        - Sheef: [ ]
      operationId: validate_token
      summary: Validates the api token
      description: Checks whether the api token passed in the `Authorization`-header is valid
  /api/user:
    summary: Path for user related operations
    description: Perform a GET request to get the list of all users or perform a POST request to create a new user
    get:
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/UserListResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: get_users
      summary: Get a list of all users
      description: Gets a list with all users
    post:
      requestBody:
        description: The data for the new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - User
      responses:
        '201':
          $ref: '#/components/responses/SingleUserResponse'
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A user with the given username exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: create_user
      summary: Creates a new user
      description: Creates a new user with the given values
  '/api/user/{username}':
    summary: Path for actions relating to a specific user
    description: >-
      Execute a GET request to get the user with the given username or a DELETE request to delete the
      given user
    get:
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/SingleUserResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The user was not found
      security:
        - Sheef: [ ]
      operationId: get_user
      summary: Gets the given user
      description: Gets the user by the given username
    delete:
      tags:
        - User
      responses:
        '204':
          description: The user was deleted successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The user was not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: It is not possible to delete yourself
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: delete_user
      summary: Deletes the given user
      description: Deletes the user with the given username
    parameters:
      - name: username
        description: The username of the user to perform the action on
        schema:
          type: string
        in: path
        required: true
  '/api/user/{username}/mod':
    summary: Path for actions related to users mod status
    description: Perform a PUT request to make the given user mod or DELETE to revoke the mod rights
    put:
      tags:
        - User
      responses:
        '204':
          description: The user is now mod
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The user was not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: You can't make yourself mod
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: make_user_mod
      summary: Gives the given user mod status
      description: Gives the given user the mod status
    delete:
      tags:
        - User
      responses:
        '204':
          description: The user is no longer a mod
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          description: The user was not found
        '409':
          description: You can't revoke your own mod rights
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: revoke_user_mod_rights
      summary: Revokes the mod rights for the given user
      description: Revokes the mod rights for the given user
    parameters:
      - name: username
        description: The username
        schema:
          type: string
        in: path
        required: true
  '/api/user/{username}/main':
    summary: Path for actions related to users main group status
    description: >-
      Perform a PUT request to make the given user part of the main group or DELETE to remove the user
      from the main group
    put:
      tags:
        - User
      responses:
        '204':
          description: The user is now in the main group
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          description: The user was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: add_user_to_main_group
      summary: Adds the given user to the main group
      description: Adds the given user to the main group
    delete:
      tags:
        - User
      responses:
        '204':
          description: The user is no longer in the main group
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          description: The user was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: remove_user_from_main_group
      summary: Removes the given user from the main group
      description: Removes the given user from the main group
    parameters:
      - name: username
        description: The username
        schema:
          type: string
        in: path
        required: true
  '/api/user/{username}/password':
    summary: Path for actions to change the password
    description: Perform a PUT request to change the password
    put:
      requestBody:
        description: The new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      tags:
        - User
      responses:
        '204':
          description: The users password was changed and all tokens deleted
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The user was not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: You can't make change your own password with this method
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: change_password
      summary: Changes the password for the given user
      description: Changes the password for the given user. Cannot be used to changes the current users password
    parameters:
      - name: username
        description: The user to change the password for
        schema:
          type: string
        in: path
        required: true
  /api/my/profile:
    summary: Path for actions around the profile
    description: >-
      Perform a GET request to get the currently logged in user or a PUT request to change the current
      users profile data
    get:
      tags:
        - Profile
      responses:
        '200':
          $ref: '#/components/responses/SingleUserResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
      security:
        - Sheef: [ ]
      operationId: get_my_profile
      summary: Gets the current user
      description: Gets the current users profile
    put:
      requestBody:
        description: The current users profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
        required: true
      tags:
        - Profile
      responses:
        '204':
          description: The profile was updated successfully
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: update_my_profile
      summary: Updates the current users profile
      description: Updates the current users profile
  /api/my/profile/password:
    summary: Path to change the current users password
    description: Perform a PUT request to change the current users password
    put:
      requestBody:
        description: The current and new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeMyPassword'
        required: true
      tags:
        - Profile
      responses:
        '204':
          description: The password was changed successfully
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The current password is wrong
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The current user seems to have been deleted
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: change_my_password
      summary: Changes the current users password
      description: 'Changes the current users password, while checking if the old password is valid'
  /api/kill:
    summary: Path for actions around kills
    description: >-
      Perform a GET request to list all kills and the users that have them. To create a new kill issue a
      POST request
    get:
      tags:
        - Kill
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KillMap'
          description: A map of the kills returned
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: get_kills
      summary: Gets a map of all kills
      description: Gets a map of all kills with the users having them
    post:
      requestBody:
        description: The kills name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KillData'
        required: true
      tags:
        - Kill
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KillData'
          description: The created kill
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A kill with the given name already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: create_kill
      summary: Creates a new kill
      description: Creates a new kill with the given name
  '/api/kill/{kill}':
    summary: Path for kill specific actions
    description: Perform a PUT request to rename a kill or a DELETE request to delete a kill
    put:
      requestBody:
        description: The kill data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KillData'
        required: true
      tags:
        - Kill
      responses:
        '204':
          description: Kill renamed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The kill was not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A kill with the new name already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: rename_kill
      summary: Rename the given kill
      description: Renames the given kill to the new name
    delete:
      tags:
        - Kill
      responses:
        '204':
          description: Kill deleted successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The kill was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: delete_kill
      summary: Delete the given kill
      description: Deletes the given kill
    parameters:
      - name: kill
        description: The kill
        schema:
          type: string
        in: path
        required: true
  '/api/user/{username}/kill/{kill}':
    summary: Path for user kill related actions
    description: >-
      Perform a PUT request to activate the kill for the given user or perform a DELETE request to
      remove the kill from the given user
    put:
      tags:
        - User
        - Kill
      responses:
        '204':
          description: The kill was activated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The kill was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: activate_kill
      summary: Activate the kill for the given user
      description: Activates the given kill for the given user
    delete:
      tags:
        - User
        - Kill
      responses:
        '204':
          description: The kill was removed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The kill was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: remove_kill
      summary: Remove the kill from the given user
      description: Removes the given kill from the given user
    parameters:
      - name: username
        description: The user
        schema:
          type: string
        in: path
        required: true
      - name: kill
        description: The kill
        schema:
          type: string
        in: path
        required: true
  '/api/my/kill/{kill}':
    summary: Path for actions around current user kills
    description: >-
      Perform a PUT request to set the given kill active for the current user or a DELETE request to
      remove the kill from the current user
    put:
      tags:
        - Profile
        - Kill
      responses:
        '204':
          description: The kill was activated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The kill was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: activate_kill_for_me
      summary: Activate the kill for the current user
      description: Activates the given kill for the current user
    delete:
      tags:
        - Profile
        - Kill
      responses:
        '204':
          description: The kill was removed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The kill was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: remove_kill_from_me
      summary: Remove the kill from the current user
      description: Removes the given kill from the current user
    parameters:
      - name: kill
        description: The kill
        schema:
          type: string
        in: path
        required: true
  /api/mount:
    summary: Path for actions around mounts
    description: >-
      Perform a GET request to list all mounts and the users that have them. To create a new mount issue
      a POST request
    get:
      tags:
        - Mount
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MountMap'
          description: A map of the mounts returned
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: get_mounts
      summary: Gets a map of all mounts
      description: Gets a map of all mounts with the users having them
    post:
      requestBody:
        description: The mounts name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MountData'
        required: true
      tags:
        - Mount
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MountData'
          description: The created mount
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A mount with the given name already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: create_mount
      summary: Creates a new mount
      description: Creates a new mount with the given name
  '/api/mount/{mount}':
    summary: Path for mount specific actions
    description: Perform a PUT request to rename a mount or a DELETE request to delete a mount
    put:
      requestBody:
        description: The mount data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MountData'
        required: true
      tags:
        - Mount
      responses:
        '204':
          description: Mount renamed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The mount was not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A mount with the new name already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: rename_mount
      summary: Rename the given mount
      description: Renames the given mount to the new name
    delete:
      tags:
        - Mount
      responses:
        '204':
          description: Mount deleted successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: delete_mount
      summary: Delete the given mount
      description: Deletes the given mount
    parameters:
      - name: mount
        description: The mount
        schema:
          type: string
        in: path
        required: true
  '/api/user/{username}/mount/{mount}':
    summary: Path for user mount related actions
    description: >-
      Perform a PUT request to activate the mount for the given user or perform a DELETE request to
      remove the mount from the given user
    put:
      tags:
        - User
        - Mount
      responses:
        '204':
          description: The mount was activated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: activate_mount
      summary: Activate the mount for the given user
      description: Activates the given mount for the given user
    delete:
      tags:
        - User
        - Mount
      responses:
        '204':
          description: The mount was removed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: remove_mount
      summary: Remove the mount from the given user
      description: Removes the given mount from the given user
    parameters:
      - name: username
        description: The user
        schema:
          type: string
        in: path
        required: true
      - name: mount
        description: The mount
        schema:
          type: string
        in: path
        required: true
  '/api/my/mount/{mount}':
    summary: Path for actions around current user mounts
    description: >-
      Perform a PUT request to set the given mount active for the current user or a DELETE request to
      remove the mount from the current user
    put:
      tags:
        - Profile
        - Mount
      responses:
        '204':
          description: The mount was activated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: activate_mount_for_me
      summary: Activate the mount for the current user
      description: Activates the given mount for the current user
    delete:
      tags:
        - Profile
        - Mount
      responses:
        '204':
          description: The mount was removed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: remove_mount_from_me
      summary: Remove the mount from the current user
      description: Removes the given mount from the current user
    parameters:
      - name: mount
        description: The mount
        schema:
          type: string
        in: path
        required: true
  /api/savage-mount:
    summary: Path for actions around savage mounts
    description: >-
      Perform a GET request to list all savage mounts and the users that have them. To create a new
      savage mount issue a POST request
    get:
      tags:
        - Savage Mount
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavageMountMap'
          description: A map of the savage mounts returned
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: get_savage_mounts
      summary: Gets a map of all savage mounts
      description: Gets a map of all savage mounts with the users having them
    post:
      requestBody:
        description: The savage mounts name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavageMountData'
        required: true
      tags:
        - Savage Mount
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavageMountData'
          description: The created savage mount
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A savage mount with the given name already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: create_savage_mount
      summary: Creates a new savage mount
      description: Creates a new savage mount with the given name
  '/api/savage-mount/{savage_mount}':
    summary: Path for savage mount specific actions
    description: Perform a PUT request to rename a savage mount or a DELETE request to delete a savage mount
    put:
      requestBody:
        description: The savage mount data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavageMountData'
        required: true
      tags:
        - Savage Mount
      responses:
        '204':
          description: Savage Mount renamed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The savage mount was not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A savage mount with the new name already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: rename_savage_mount
      summary: Rename the given savage mount
      description: Renames the given savage mount to the new name
    delete:
      tags:
        - Savage Mount
      responses:
        '204':
          description: Savage Mount deleted successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The savage mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: delete_savage_mount
      summary: Delete the given savage mount
      description: Deletes the given savage mount
    parameters:
      - name: savage_mount
        description: The savage mount
        schema:
          type: string
        in: path
        required: true
  '/api/user/{username}/savage-mount/{savage_mount}':
    summary: Path for user savage mount related actions
    description: >-
      Perform a PUT request to activate the savage mount for the given user or perform a DELETE request
      to remove the savage mount from the given user
    put:
      tags:
        - User
        - Savage Mount
      responses:
        '204':
          description: The savage mount was activated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The savage mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: activate_savage_mount
      summary: Activate the savage mount for the given user
      description: Activates the given savage mount for the given user
    delete:
      tags:
        - User
        - Savage Mount
      responses:
        '204':
          description: The savage mount was removed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The savage mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: remove_savage_mount
      summary: Remove the savage mount from the given user
      description: Removes the given savage mount from the given user
    parameters:
      - name: username
        description: The user
        schema:
          type: string
        in: path
        required: true
      - name: savage_mount
        description: The savage mount
        schema:
          type: string
        in: path
        required: true
  '/api/my/savage-mount/{savage_mount}':
    summary: Path for actions around current user savage mounts
    description: >-
      Perform a PUT request to set the given savage mount active for the current user or a DELETE
      request to remove the savage mount from the current user
    put:
      tags:
        - Profile
        - Savage Mount
      responses:
        '204':
          description: The savage mount was activated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The savage mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: activate_savage_mount_for_me
      summary: Activate the savage mount for the current user
      description: Activates the given savage mount for the current user
    delete:
      tags:
        - Profile
        - Savage Mount
      responses:
        '204':
          description: The savage mount was removed successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The savage mount was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: remove_savage_mount_from_me
      summary: Remove the savage mount from the current user
      description: Removes the given savage mount from the current user
    parameters:
      - name: savage_mount
        description: The savage mount
        schema:
          type: string
        in: path
        required: true
  /api/crafter:
    summary: Paths for crafter actions
    description: >-
      Perform a GET request to get a list of all crafters for the current user or perform a POST request
      to create a new crafter
    get:
      tags:
        - Crafter
      responses:
        '200':
          $ref: '#/components/responses/CrafterListResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: get_crafters
      summary: Get list of crafter
      description: Gets a list of all crafters the current user has configured
    post:
      requestBody:
        description: The crafter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Crafter'
        required: true
      tags:
        - Crafter
      responses:
        '201':
          $ref: '#/components/responses/SingleCrafterResponse'
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A crafter with the given job already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: create_crafter
      summary: Creates a new crafter for the current user
      description: Creates a new crafter for the current user
  '/api/crafter/{job}':
    summary: Path for actions around a specific crafter
    description: >-
      Perform a GET request to get a crafter by job, perform a PUT request to update a crafter or
      perform a DELETE request to delete a crafter
    get:
      tags:
        - Crafter
      responses:
        '200':
          $ref: '#/components/responses/SingleCrafterResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A crafter with the given job does not exist
      security:
        - Sheef: [ ]
      operationId: get_crafter
      summary: Get a crafter by job
      description: Gets the crafter with the given job
    put:
      requestBody:
        description: The crafter data to update to
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Crafter'
        required: true
      tags:
        - Crafter
      responses:
        '204':
          description: The crafter was updated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A crafter with the new job already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      operationId: update_crafter
      summary: Updates the given crafter
      description: Updates the given crafter with the new values
    delete:
      tags:
        - Crafter
      responses:
        '204':
          description: Successfully deleted the crafter
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The crafter was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      operationId: delete_crafter
      summary: Delete the given crafter
      description: Deletes the given crafter
    parameters:
      - name: job
        description: The job of the crafter
        schema:
          type: string
        in: path
        required: true
  /api/fighter:
    summary: Paths for fighter actions
    description: >-
      Perform a GET request to get a list of all fighters for the current user or perform a POST request
      to create a new fighter
    get:
      tags:
        - Fighter
      responses:
        '200':
          $ref: '#/components/responses/FighterListResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: get_fighters
      summary: Get list of fighter
      description: Gets a list of all fighters the current user has configured
    post:
      requestBody:
        description: The fighter to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fighter'
        required: true
      tags:
        - Fighter
      responses:
        '201':
          $ref: '#/components/responses/SingleFighterResponse'
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A fighter with the given job already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: create_fighter
      summary: Creates a new fighter for the current user
      description: Creates a new fighter for the current user
  '/api/fighter/{job}':
    summary: Path for actions around a specific fighter
    description: >-
      Perform a GET request to get a fighter by job, perform a PUT request to update a fighter or
      perform a DELETE request to delete a fighter
    get:
      tags:
        - Fighter
      responses:
        '200':
          $ref: '#/components/responses/SingleFighterResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: get_fighter
      summary: Get a fighter by job
      description: Gets the fighter with the given job
    put:
      requestBody:
        description: The fighter data to update to
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fighter'
        required: true
      tags:
        - Fighter
      responses:
        '204':
          description: The fighter was updated successfully
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: A fighter with the new job already exists
        '500':
          $ref: '#/components/responses/UnknownError'
      operationId: update_fighter
      summary: Updates the given fighter
      description: Updates the given fighter with the new values
    delete:
      tags:
        - Fighter
      responses:
        '204':
          description: Successfully deleted the fighter
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
          description: The fighter was not found
        '500':
          $ref: '#/components/responses/UnknownError'
      operationId: delete_fighter
      summary: Delete the given fighter
      description: Deletes the given fighter
    parameters:
      - name: job
        description: The job of the fighter
        schema:
          type: string
        in: path
        required: true
  /api/calendar:
    summary: Path for actions of the calendar
    description: Perform a GET request to get the calendar for the given month
    get:
      tags:
        - Calendar
      responses:
        '200':
          $ref: '#/components/responses/CalendarResponse'
        '400':
          $ref: '#/components/responses/InvalidFieldResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
      security:
        - Sheef: [ ]
      operationId: get_calendar
      summary: Get the calendar
      description: Gets the calendar for the provided query
    parameters:
      - name: year
        description: 'The year of the calendar, defaults to the current year'
        schema:
          format: int32
          type: integer
        in: query
      - name: month
        description: 'The month of the calendar, defaults to the current month'
        schema:
          format: int32
          type: integer
        in: query
  '/api/calendar/{year}/{month}/{day}':
    summary: Path for actions around events
    description: >-
      Perform a GET request to get the event for the given day and current user or perform a PUT request
      to change the status
    get:
      tags:
        - Calendar
      responses:
        '200':
          $ref: '#/components/responses/SingleEventResponse'
        '400':
          $ref: '#/components/responses/InvalidFieldResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          description: The day was not found
      operationId: get_event_for_day
      summary: Get the day
      description: Gets the event for the given day
    put:
      requestBody:
        description: The availability information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEvent'
        required: true
      tags:
        - Calendar
      responses:
        '204':
          description: The availability was updated successfully
        '400':
          $ref: '#/components/responses/InvalidFieldResponse'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      operationId: update_event
      summary: Update availability
      description: Updates the availability and time constraint for the given date and the current user
    parameters:
      - name: day
        description: The day of the event
        schema:
          format: int32
          type: integer
        in: path
        required: true
      - name: month
        description: The month of the event
        schema:
          format: int32
          type: integer
        in: path
        required: true
      - name: year
        description: The year of the event
        schema:
          format: int32
          type: integer
        in: path
        required: true
  '/api/user/{username}/profile':
    summary: Path for actions for updating the profile of a user
    description: Perform a PUT request to update the profile for the given user
    put:
      requestBody:
        description: The data to update the user with
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
        required: true
      tags:
        - User
      responses:
        '204':
          description: The user profile was updated successfully
        '400':
          $ref: '#/components/responses/RequiredFieldMissing'
        '401':
          $ref: '#/components/responses/InvalidApiTokenResponse'
        '403':
          $ref: '#/components/responses/UserNeedsModRights'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/UnknownError'
      security:
        - Sheef: [ ]
      operationId: update_user_profile
      summary: Update the profile
      description: Updates the profile of the given user
    parameters:
      - name: username
        description: The user to update
        schema:
          type: string
        in: path
        required: true
components:
  schemas:
    Login:
      title: Root Type for Login
      description: Contains the username and the password to use for the login
      required:
        - password
        - username
      type: object
      properties:
        username:
          format: password
          description: The username of the user
          type: string
        password:
          description: The password of the user
          type: string
      example:
        username: John
        password: SuperS3cret
    LoginResponse:
      title: Root Type for LoginResponse
      description: Contains the user and given api token
      required:
        - user
        - token
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          description: >-
            The API token to authenticate with against Sheef. Include it in the
            `Authorization`-header with the scheme `Sheef`
          type: string
          readOnly: true
      example:
        user:
          username: John
          isMod: true
          isMainGroup: false
          gearLevel: '625'
          job: Paladin
        token: >-
          John/ARR4WZQ4fkOWvv-kw_NfoiumiPNHO_qXknUS-_HzLvEj1v-wRY7Wj1CNVzsqAel1a68OPu9Cqd2_fe1k92tHrQ==
    User:
      title: Root Type for User
      description: Contains all information about a user
      required:
        - username
      type: object
      properties:
        username:
          description: The username of the user
          type: string
        isMod:
          description: Whether the user is mod
          type: boolean
        isMainGroup:
          description: Whether the user is part of the main group
          type: boolean
        gearLevel:
          description: The gear level of the user
          type: string
        job:
          description: The job of the user
          type: string
      example:
        username: John
        isMod: true
        isMainGroup: false
        gearLevel: '625'
        job: Paladin
    ChangePassword:
      title: Root Type for ChangePassword
      description: Contains information to change the passsword
      required:
        - new_password
      type: object
      properties:
        new_password:
          format: password
          description: The new password
          type: string
      example:
        new_password: Sup3erS3cr3t
    UpdateProfile:
      title: Root Type for UpdateProfile
      description: The data to set the profile of the current user with
      type: object
      properties:
        job:
          description: The job of the current user
          type: string
        gearLevel:
          description: The gear level of the current user
          type: string
      example:
        job: Paladin
        gearLevel: '625'
    ChangeMyPassword:
      title: Root Type for ChangeMyPassword
      description: Contains information to change the current users password
      required:
        - old_password
        - new_password
      type: object
      properties:
        old_password:
          format: password
          description: The users current password
          type: string
        new_password:
          format: password
          description: The new password for the user
          type: string
      example:
        old_password: not_so_secret
        new_password: Sup3rS3cr3t
    KillMap:
      description: A map of kills
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    KillData:
      title: Root Type for KillData
      description: The data of a kill
      required:
        - name
      type: object
      properties:
        name:
          description: The name of the kill
          type: string
      example:
        name: P01s
    MountMap:
      description: A map of mounts
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    MountData:
      title: Root Type for MountData
      description: The data of a mount
      required:
        - name
      type: object
      properties:
        name:
          description: The name of the mount
          type: string
      example:
        name: P01s
    SavageMountMap:
      description: A map of savage mounts
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    SavageMountData:
      title: Root Type for SavageMountData
      description: The data of a savage mount
      required:
        - name
      type: object
      properties:
        name:
          description: The name of the savage mount
          type: string
      example:
        name: P01s
    Crafter:
      title: Root Type for Crafter
      description: Represents a crafter saved in Sheef
      type: object
      properties:
        job:
          description: The job name of the crafter
          type: string
        level:
          description: The level of the crafter
          type: string
      example:
        job: Smith
        level: '158'
    Fighter:
      title: Root Type for Fighter
      description: Represents a figher saved in Sheef
      type: object
      properties:
        job:
          description: The job name of the fighter
          type: string
        level:
          description: The level of the fighter
          type: string
        gearScore:
          description: The level of the fighter
          type: string
      example:
        job: Smith
        level: '158'
        gearScore: '267'
    Event:
      title: Root Type for Event
      description: Contains the information about a calendar event
      type: object
      properties:
        username:
          description: The username of the user this event is for
          type: string
        time:
          description: The time constraint the user is available in
          type: string
        available:
          description: Whether the user is available
          type: boolean
        user:
          $ref: '#/components/schemas/User'
          description: The user
          properties:
            username:
              type: string
            isMod:
              type: boolean
            isMainGroup:
              type: boolean
            gearLevel:
              type: string
            job:
              type: string
      example:
        username: John
        time: '12:00'
        available: true
        user:
          username: John
          isMod: true
          isMainGroup: false
          gearLevel: '641'
          job: RDM
    Calendar:
      title: Root Type for Calendar
      description: A month of the planing
      type: object
      properties:
        year:
          format: int32
          description: The year
          type: integer
        month:
          format: int32
          description: The month
          type: integer
        days:
          description: A list of days in the selected month
          type: array
          items:
            $ref: '#/components/schemas/Day'
      example:
        year: 2023
        month: 7
        days:
          - date: '2023-07-01'
            events:
              - username: John
                time: '12:00'
                available: true
                user:
                  username: John
                  isMod: true
                  isMainGroup: false
                  gearLevel: '641'
                  job: RDM
    Day:
      title: Root Type for Day
      description: A day in the calendar
      type: object
      properties:
        date:
          format: date
          description: The date of the day
          type: string
        events:
          description: A list of the events on the current day
          type: array
          items:
            $ref: '#/components/schemas/Event'
      example:
        date: '2023-07-01'
        events:
          - username: Azami
            time: ''
            available: true
            user:
              username: Azami
              isMod: true
              isMainGroup: false
              gearLevel: '641'
              job: RDM
    UpdateEvent:
      title: Root Type for UpdateEvent
      description: Contains the info for update of event availability
      required:
        - available
      type: object
      properties:
        available:
          description: Whether the current user is available for the given date
          type: boolean
        time:
          description: The time constraint the user is available in
          type: string
      example:
        available: true
        time: '12:00'
    ErrorDetails:
      title: Root Type for ErrorDetails
      description: Contains information about the given errors
      type: object
      properties:
        entityType:
          description: The type of entity the error occurred for
          enum:
            - event
            - crafter
            - fighter
            - kill
            - user
            - mount
            - savage-mount
            - token
            - calendar
          type: string
        errorType:
          description: The type of error
          enum:
            - notFoundError
            - existsAlreadyError
            - invalidDataError
            - ioError
            - serializationError
            - validationError
            - insufficientRightsError
            - unknownError
          type: string
        message:
          description: The error message
          type: string
      example:
        entityType: crafter
        errorType: notFoundError
        message: The crafter was not found
  responses:
    LoginResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'
      description: The login was successful
    UserListResponse:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
          examples:
            Userlist:
              value:
                - username: some text
                  isMod: true
                  isMainGroup: true
                  gearLevel: some text
                  job: some text
                - username: some text
                  isMod: true
                  isMainGroup: true
                  gearLevel: some text
                  job: some text
      description: Contains a list of users
    SingleUserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            User:
              value:
                username: some text
                isMod: true
                isMainGroup: true
                gearLevel: some text
                job: some text
      description: Contains only one user
    InvalidApiTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'
      description: The provided api token is invalid
    UserNeedsModRights:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'
      description: The user needs mod rights to perform this action
    RequiredFieldMissing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'
      description: A required field is missing
    UnknownError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'
      description: An unknown error occured
    SingleCrafterResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Crafter'
      description: Contains a single crafter returned from Sheef
    CrafterListResponse:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Crafter'
      description: A list of crafters
    SingleFighterResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fighter'
      description: Contains a single fighter returned from Sheef
    FighterListResponse:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Fighter'
      description: A list of fighters
    CalendarResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Calendar'
      description: A response containing a calendar
    SingleEventResponse:
      description: Contains a single event
    InvalidFieldResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'
      description: Invalid values passed to the server
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'
      description: Entity not found
  securitySchemes:
    Sheef:
      type: apiKey
      description: The Sheef API key
      name: Authorization
      in: header
security:
  - Sheef: [ ]
tags:
  - name: Authentication
    description: All endpoints around the authentication of users
  - name: Profile
    description: All endpoints around the current users profile
  - name: Calendar
    description: All endpoints around the calendar
  - name: User
    description: All endpoints around the users of sheef
  - name: Crafter
    description: All endpoints around the crafter of the current user
  - name: Fighter
    description: All endpoints around the fighter of the current user
  - name: Mount
    description: All endpoints around the mounts
  - name: Savage Mount
    description: All endpoints around the savage mounts
  - name: Kill
    description: All endpoints around the kills
